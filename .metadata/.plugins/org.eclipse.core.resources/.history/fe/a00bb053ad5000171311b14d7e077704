package com.jt.manage.controller;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Random;

import javax.imageio.ImageIO;

import org.apache.commons.lang3.RandomUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.jt.common.vo.PicUploadResult;
import com.jt.manage.service.PropertyService;

@Controller
public class PicUploadController {
	@Autowired
	private PropertyService propertyService;
	@RequestMapping("/pic/upload")
	@ResponseBody
	public PicUploadResult upload(MultipartFile uploadFile){
		PicUploadResult result = new PicUploadResult();
		//获取文件原始文件名
		String filename = uploadFile.getOriginalFilename();
		//获取文件后缀名(扩展名)
		String extName = filename.substring(filename.lastIndexOf("."));
		//判断文件是否为图片文件
		if(!extName.matches("^*\\.(jpg|png|jpeg|gif)$")){
			result.setError(1);
		}else{
			//判断文件是否为木马文件,从包装的上传文件获取流，强制转换成图片对象
			try {
				BufferedImage image = ImageIO.read(uploadFile.getInputStream());
				result.setHeight(""+image.getHeight());
				result.setWidth(""+image.getWidth());
				
				//4.生成两个路径：
				//4.1绝对路径，图片保存的路径		c:/jt-upload/images/2017/06/12/239847293874.jpg
				//新文件名称：当前毫秒数+3位随机数+扩展名
				String newFileName = ""+System.currentTimeMillis()+RandomUtils.nextInt(100, 999)+extName;
				String _dir = "/images/"+new SimpleDateFormat("yyyy/MM/dd")+"/";
				//在PropertyService中通过注解的方式引入配置文件的图片保存路径
				String path = propertyService.REPOSITORY_PATH + _dir;
				
				//4.2相对路径：图片网上访问路径
				String url = propertyService.IMAGE_BASE_URL+_dir+newFileName;
				result.setUrl(url);
				
				//如果目录不存在则创建目录
				File dir = new File(path);
				if(!dir.exists()){
					dir.mkdir();
				}
				
				uploadFile.transferTo(new File(path+newFileName));
				
			} catch (IOException e) {
				result.setError(1);
				e.printStackTrace();
			}
		}
		return result;
	}
}